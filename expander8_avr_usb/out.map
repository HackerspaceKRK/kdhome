Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
                              /tmp/ccgMupnA.o (__do_copy_data)
/usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
                              /tmp/ccgMupnA.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

usbTxBuf            0xb               /tmp/ccgMupnA.o
usbTxStatus1        0xc               /tmp/ccgMupnA.o
usbDeviceAddr       0x1               /tmp/ccgMupnA.o
usbRxToken          0x1               /tmp/ccgMupnA.o
buffer              0x1               /tmp/ccgMupnA.o
usbInputBufOffset   0x1               /tmp/ccgMupnA.o
usbMsgPtr           0x2               /tmp/ccgMupnA.o
usbRxLen            0x1               /tmp/ccgMupnA.o
usbNewDeviceAddr    0x1               /tmp/ccgMupnA.o
usbCurrentTok       0x1               /tmp/ccgMupnA.o
usbConfiguration    0x1               /tmp/ccgMupnA.o
usbRxBuf            0x16              /tmp/ccgMupnA.o

Discarded input sections

 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
 .text          0x0000000000000000        0x0 /tmp/ccgMupnA.o
 .text.min      0x0000000000000000        0xa /tmp/ccgMupnA.o
 .text.max      0x0000000000000000        0xa /tmp/ccgMupnA.o
 .text.minU16   0x0000000000000000        0xc /tmp/ccgMupnA.o
 .text.maxU16   0x0000000000000000        0xc /tmp/ccgMupnA.o
 .text.minI16   0x0000000000000000        0xc /tmp/ccgMupnA.o
 .text.maxI16   0x0000000000000000        0xc /tmp/ccgMupnA.o
 .text.absI16   0x0000000000000000        0xc /tmp/ccgMupnA.o
 .data          0x0000000000000000        0x0 /tmp/cc3140oB.o
 .bss           0x0000000000000000        0x0 /tmp/cc3140oB.o
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .data          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
LOAD /tmp/ccgMupnA.o
LOAD /tmp/cc3140oB.o
LOAD /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x754
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026       0x49 /tmp/ccgMupnA.o
                0x0000000000000026                usbDescriptorConfiguration
                0x000000000000003f                usbDescriptorDevice
                0x0000000000000051                usbDescriptorStringDevice
                0x0000000000000065                usbDescriptorStringVendor
                0x000000000000006b                usbDescriptorString0
                0x0000000000000070                . = ALIGN (0x2)
 *fill*         0x000000000000006f        0x1 00
                0x0000000000000070                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000070        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000070                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000070                __ctors_start = .
 *(.ctors)
                0x0000000000000070                __ctors_end = .
                0x0000000000000070                __dtors_start = .
 *(.dtors)
                0x0000000000000070                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000070        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
                0x0000000000000070                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000070        0xc /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000000000000007c       0x16 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_copy_data.o)
                0x000000000000007c                __do_copy_data
 .init4         0x0000000000000092       0x10 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000092                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a6        0x2 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o
                0x00000000000000a6                __vector_12
                0x00000000000000a6                __bad_interrupt
                0x00000000000000a6                __vector_6
                0x00000000000000a6                __vector_3
                0x00000000000000a6                __vector_11
                0x00000000000000a6                __vector_13
                0x00000000000000a6                __vector_17
                0x00000000000000a6                __vector_7
                0x00000000000000a6                __vector_5
                0x00000000000000a6                __vector_4
                0x00000000000000a6                __vector_9
                0x00000000000000a6                __vector_2
                0x00000000000000a6                __vector_15
                0x00000000000000a6                __vector_8
                0x00000000000000a6                __vector_14
                0x00000000000000a6                __vector_10
                0x00000000000000a6                __vector_16
                0x00000000000000a6                __vector_18
 .text          0x00000000000000a8      0x274 /tmp/cc3140oB.o
                0x00000000000000a8                usbCrc16
                0x00000000000000d2                usbCrc16Append
                0x00000000000000da                __vector_1
                0x000000000000031c                . = ALIGN (0x2)
 *(.text.*)
 .text.usbPoll  0x000000000000031c      0x2d4 /tmp/ccgMupnA.o
 .text.startup.main
                0x00000000000005f0      0x160 /tmp/ccgMupnA.o
                0x00000000000005f0                main
                0x0000000000000750                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000750        0x0 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
                0x0000000000000750                exit
                0x0000000000000750                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000750        0x4 /usr/lib/gcc/avr/4.7.0/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000754                _etext = .

.data           0x0000000000800060        0x2 load address 0x0000000000000754
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x2 /tmp/ccgMupnA.o
                0x0000000000800060                usbTxLen
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800062                . = ALIGN (0x2)
                0x0000000000800062                _edata = .
                0x0000000000800062                PROVIDE (__data_end, .)

.bss            0x0000000000800062       0x39
                0x0000000000800062                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800062        0x2 /tmp/ccgMupnA.o
                0x0000000000800062                ledTimer
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800064       0x37 /tmp/ccgMupnA.o
                0x0000000000800064                usbTxBuf
                0x000000000080006f                usbTxStatus1
                0x000000000080007b                usbDeviceAddr
                0x000000000080007c                usbRxToken
                0x000000000080007d                buffer
                0x000000000080007e                usbInputBufOffset
                0x000000000080007f                usbMsgPtr
                0x0000000000800081                usbRxLen
                0x0000000000800082                usbNewDeviceAddr
                0x0000000000800083                usbCurrentTok
                0x0000000000800084                usbConfiguration
                0x0000000000800085                usbRxBuf
                0x000000000080009b                PROVIDE (__bss_end, .)
                0x0000000000000754                __data_load_start = LOADADDR (.data)
                0x0000000000000756                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080009b        0x0
                0x000000000080009b                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080009b                PROVIDE (__noinit_end, .)
                0x000000000080009b                _end = .
                0x000000000080009b                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x6cc
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o

.stabstr        0x0000000000000000       0x54
 *(.stabstr)
 .stabstr       0x0000000000000000       0x54 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 /tmp/ccgMupnA.o
                                         0x12 (size before relaxing)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(out.elf elf32-avr)
LOAD linker stubs
